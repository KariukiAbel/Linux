In most Linux systems, your default shell is the bash shell. To fi nd out what your default
login shell is, type the following commands:

$whoami
bobsira


Although most Linux users have a preference for one shell or another, when you know how to
use one shell, you can quickly learn any of the others by occasionally referring to the shell’s
man page (for example, type man bash).

The man pages provide documentation for commands, file formats, and other components in Linux.

Running Commands
The simplest way to run a command is to type the name of the command from a shell.

$ date
Sat Oct 19 08:04:00 EST 2014

Typing the date command, with no options or arguments, causes the current day, month,
date, time, time zone, and year to be displayed as just shown. Here are a few other com-
mands you can try:

$ pwd
/home/chris
$ hostname
mydesktop
$ ls
Desktop
Documents
Downloads
Music
Pictures
Public
Templates
Videos

The pwd command shows your current working directory. Typing hostname shows your
computer’s hostname. The ls command lists the fi les and directories in your current direc-
tory. Although many commands can be run by just typing command names, it’s more com-
mon to type more after the command to modify its behavior. The characters and words you
can type after a command are called options and arguments.


Understanding command syntax
Most commands have one or more options you can add to change the command’s behavior.
Options typically consist of a single letter, preceded by a hyphen. However, you can group
single-letter options together or precede each with a hyphen, to use more than one option
at a time. For example, the following two uses of options for the ls command are the same:

$ ls -l -a -t
$ ls -lat

In both cases, the ls command is run with the -l (long listing), -a (show hidden dot
fi les), and -t options (list by time).


Some commands include options that are represented by a whole word. To tell a command
to use a whole word as an option, you typically precede it with a double hyphen (--). For
example, to use the help option on many commands, you enter --help on the command
line. Without the double hyphen, the letters h, e, l, and p would be interpreted as separate
options. (There are some commands that don’t follow the double hyphen convention, using
a single hyphen before a word, but most commands use double hyphens for word options.)

Note: You can use the --help option with most commands to see the options and arguments that they support: for exam-
ple, try typing hostname --help.


Sometimes, an argument is associated with an option. In that case, the argument must immedi-
ately follow the option. With single-letter options, the argument typically follows after a space.
For full-word options, the argument often follows an equal sign (=). Here are some examples:

$ ls --hide=Desktop
Documents Music
Downloads Pictures
Public
Videos
Templates

In the previous example, the --hide option tells the ls command to not display the fi le or
directory named Desktop when listing the contents of the directory. Notice that the equal
sign immediately follows the option (no space) and then the argument (again, no space).

Here’s an example of a single-letter option that is followed by an argument:
$ tar -cvf backup.tar /home/chris

In the tar example just shown, the options say to create (c) a fi le (f) named backup.tar
that includes all the contents of the /home/chris directory and its subdirectories and
show verbose messages as the backup is created (v). Because backup.tar is an argument
to the f option, backup.tar must immediately follow the option.

Here are a few commands you can try out. See how they behave differently with
different options:

$ ls
Desktop Documents Downloads Music Pictures Public Templates
Videos

$ ls -a
.
Desktop
.gnome2_private .lesshst
Public
..
Documents
.gnote
.local
Templates
.bash_history Downloads
.gnupg
.mozilla
Videos
.bash_logout
.emacs
.gstreamer-0.10 Music
.xsession-errors
.bash_profile .esd_auth
.gtk-bookmarks
Pictures
.zshrc
.bashrc
.fsync.log .gvfs
Pictures


$ uname
Linux
$ uname -a
Linux unused 3.10.0-121.el7.x86_64 #1 SMP Tue Oct 21 10:48:19
EDT 2014 x86_64 x86_64 x86_64 GNU/Linux
$ date
Tue Oct 21 09:08:38 EST 2014
$ date +'%d/%m/%y'
10/21/14
$ date +'%A, %B %d, %Y'
Tuesday, October 21, 2014

The ls command, by itself, shows all regular fi les and directories in the current directory.
By adding the -a, you can also see the hidden fi les in the directory (those beginning with
a dot). The uname command shows the type of system you are running (Linux). When you
add -a, you also can see the hostname, kernel release, and kernel version.

The date command has some special types of options. By itself, date simply prints the
current day, date, and time as shown above. But the date command supports a special +
format option, which lets you display the date in different formats. Type date --help to
see different format indicators you can use.


When you log in to a Linux system, Linux views you as having a particular identity, which
includes your username, group name, user ID, and group ID. Linux also keeps track of your
login session: It knows when you logged in, how long you have been idle, and where you
logged in from.

To fi nd out information about your identity, use the id command as follows:

$ id
uid=501(chris) gid=501(chris) groups=105(sales), 7(lp)

In this example, the username is chris, which is represented by the numeric user ID (uid)
501. The primary group for chris also is called chris, which has a group ID (gid) of 501.
It is normal for Fedora and Red Hat Enterprise Linux users to have the same primary group
name as their username. The user chris also belongs to other groups called sales (gid
105) and lp (gid 7). These names and numbers represent the permissions that chris has
to access computer resources.


You can see information about your current login session by using the who command. In
the following example, the -u option says to add information about idle time and the
process ID and -H asks that a header be printed:

$ who -uH
NAME	LINE	TIME		IDLE	PID	COMMENT
chris	tty1	Jan 13 20:57	.	2013


The output from this who command shows that the user chris is logged in on tty1 (which
is the fi rst virtual console on the monitor connected to the computer), and his login session
began at 20:57 on January 13. The IDLE time shows how long the shell has been open without
any command being typed (the dot indicates that it is currently active). PID shows the process
ID of the user’s login shell. COMMENT would show the name of the remote computer the user
had logged in from, if that user had logged in from another computer on the network, or the
name of the local X display if that user were using a Terminal window (such as :0.0).



Locating commands
Now that you have typed a few commands, you may wonder where those commands are
located and how the shell fi nds the commands you type. To fi nd commands you type, the
shell looks in what is referred to as your path. For commands that are not in your path, you
can type the complete identity of the location of the command

If you know the directory that contains the command you want to run, one way to run it
is to type the full, or absolute, path to that command. For example, you run the date com-
mand from the /bin directory by typing

$ /bin/date


Of course, this can be inconvenient, especially if the command resides in a directory with a
long pathname. The better way is to have commands stored in well-known directories and
then add those directories to your shell’s PATH environment variable. The path consists of
a list of directories that are checked sequentially for the commands you enter. To see your
current path, type the following:
$ echo $PATH
/usr/local/bin:/usr/bin:/bin:/usr/local/sbin:/usr/sbin:/sbin:↵
/home/chris/bin

The results show a common default path for a regular Linux user. Directories in the path
list are separated by colons. Most user commands that come with Linux are stored in the
/bin, /usr/bin, or /usr/local/bin directories. The /sbin and /usr/sbin directories
contain administrative commands (some Linux systems don’t put those directories in regu-
lar users’ paths). The last directory shown is the bin directory in the user’s home directory
(/home/chris/bin).

Unlike some other operating systems, Linux does not, by default, check the current direc-
tory for an executable before searching the path. It immediately begins searching the path,
and executables in the current directory are run only if they are in the PATH variable or
you give their absolute (such as /home/chris/scriptx.sh) or relative (for example,
./scriptx.sh) address.

The path directory order is important. Directories are checked from left to right. So, in
this example, if there is a command called foo located in both the /bin and /usr/bin
directories, the one in /bin is executed. To have the other foo command run, you either
type the full path to the command or change your PATH variable



Not all the commands you run are located in directories in your PATH variable. Some com-
mands are built into the shell. Other commands can be overridden by creating aliases that
defi ne any commands and options that you want the command to run. There are also ways
of defi ning a function that consists of a stored series of commands. Here is the order in
which the shell checks for the commands you type:

1. Aliases. Names set by the alias command that represent a particular command
and a set of options. Type alias to see what aliases are set. Often, aliases enable
you to defi ne a short name for a long, complicated command.

2. Shell reserved word. Words reserved by the shell for special use. Many of these
are words that you would use in programming-type functions, such as do, while,
case, and else.

3. Function. This is a set of commands that are executed together within the
current shell.

4. Built-in command. This is a command built into the shell. As a result, there
is no representation of the command in the fi lesystem. Some of the most com-
mon commands you will use are shell built-in commands,such as cd(to change directories),
echo(to output text to the screen),exit(to exit from a shell),fg(to bring a command 
running in the background to the foreground),history(to see a list of commands that
were previously run),pwd(to list the present working directory),set(to set shell options),
and type(to show the location of a command).

5. Filesystem command. This command is stored in and executed from the computer’s
fi lesystem. (These are the commands that are indicated by the value of the PATH
variable.)


To find out where a particular command is taken from, you can use the type command.
For example,
to find out where the bash shell command is located, type the following:

$ type bash
bash is /bin/bash


If a command resides in several locations, you can add the -a option to
have all the known locations of the command printed. For example, the command type -a
ls should show an aliased and fi lesystem location for the ls command.
